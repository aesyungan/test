/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package liverecognition;

import Luxand.FSDK;
import Luxand.FSDKCam;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URI;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import org.java_websocket.client.WebSocketClient;
import org.java_websocket.handshake.ServerHandshake;
import sun.misc.IOUtils;

/**
 *
 * @author Alex
 */
public class AppFace extends javax.swing.JFrame {

    //public final Timer drawingTimer;
    private FSDKCam.HCamera cameraHandle;
    private String userName;
    WebSocketClient mWs = null;
    private List<FSDK.FSDK_FaceTemplate.ByReference> faceTemplates; // set of face templates (we store 10)

    // program states: waiting for the user to click a face
    // and recognizing user's face
    final int programStateRemember = 1;
    final int programStateRecognize = 2;
    private int programState = programStateRecognize;

    private String TrackerMemoryFile = "tracker.dat";
    private int mouseX = 0;
    private int mouseY = 0;

    FSDK.HTracker tracker = new FSDK.HTracker();
//socket
    public final int SOCKET_PORT = 8888;
    int current = 0;
    ServerSocket servsock = null;
    Socket sock = null;
    public final int FILE_SIZE = 58087;
    public boolean isOpenDialog = false;

    /**
     * Creates new form AppFace
     */
    public AppFace() {
        initComponents();
        //labelicon.setIcon(new ImageIcon("img/video1.png"));
        System.loadLibrary("facesdk");
        showColorBtnAlarma();
        try {
            int r = FSDK.ActivateLibrary("gdP/7USUH5MMRsjGULqlposjsbdKxcyrUZj3eoZjoLKJO7KEo6KJW/lBS1LWXfRl3zTwaILZMWn38kGa2KyJ0qPHcrQmsr7lXAanH45Z861hnmdRfPDBqcxqpe6aS+Oy2YYxmSYHrb5crcMMdmYdoLr7eUBvquXS6GpYCXkqXLU=");
            if (r != FSDK.FSDKE_OK) {
                JOptionPane.showMessageDialog(mainPanel, "Please run the License Key Wizard (Start - Luxand - FaceSDK - License Key Wizard)", "Error activating FaceSDK", JOptionPane.ERROR_MESSAGE);
                System.exit(r);
            }
        } catch (java.lang.UnsatisfiedLinkError e) {
            JOptionPane.showMessageDialog(mainPanel, e.toString(), "Link Error", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }

        FSDK.Initialize();

        // creating a Tracker
        if (FSDK.FSDKE_OK != FSDK.LoadTrackerMemoryFromFile(tracker, TrackerMemoryFile)) // try to load saved tracker state
        {
            FSDK.CreateTracker(tracker); // if could not be loaded, create a new tracker
        }
        Thread thread = new Thread() {
            public void run() {
                System.out.println("iniciando socket");
                try {
                    // this.jButton1.setEnabled(false);
                    StartSocket();
                } catch (IOException ex) {
                    System.out.println("Error al inicia Socket->" + ex.getMessage());
                }
            }
        };
        thread.start();
        InitSocketClientWeb();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtUserNum = new javax.swing.JPanel();
        btnGuardar = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        lbIconRaspberry = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtNumeroIntentos = new javax.swing.JLabel();
        txtNumUser = new javax.swing.JLabel();
        lbIconRaspberry1 = new javax.swing.JLabel();
        btnAlarmasActive = new javax.swing.JButton();
        panelCameras = new javax.swing.JPanel();
        panelCamera4 = new javax.swing.JPanel();
        lbCamera4 = new javax.swing.JLabel();
        mainPanel = new javax.swing.JLabel();
        panelCamera2 = new javax.swing.JPanel();
        lbCamera2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        mGuardarDatos = new javax.swing.JMenuItem();
        mBorrar = new javax.swing.JMenuItem();
        mSalir = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        mNotificaciones = new javax.swing.JMenuItem();
        mAcerca = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 255, 255)));

        txtUserNum.setBackground(new java.awt.Color(255, 255, 255));

        btnGuardar.setBackground(new java.awt.Color(0, 204, 255));
        btnGuardar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnGuardar.setForeground(new java.awt.Color(255, 255, 255));
        btnGuardar.setText("Guardar Datos");
        btnGuardar.setBorder(null);
        btnGuardar.setContentAreaFilled(false);
        btnGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuardar.setOpaque(true);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnBorrar.setBackground(new java.awt.Color(0, 204, 255));
        btnBorrar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnBorrar.setForeground(new java.awt.Color(255, 255, 255));
        btnBorrar.setText("Borrar Datos");
        btnBorrar.setBorder(null);
        btnBorrar.setContentAreaFilled(false);
        btnBorrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBorrar.setOpaque(true);
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        lbIconRaspberry.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbIconRaspberry.setIcon(new ImageIcon("img/raspberryLogo.png"));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("SMART VISION");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Numero Intentos:");

        txtNumeroIntentos.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        txtNumeroIntentos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtNumeroIntentos.setText("0");
        txtNumeroIntentos.setMaximumSize(new java.awt.Dimension(150, 200));
        txtNumeroIntentos.setMinimumSize(new java.awt.Dimension(50, 50));
        txtNumeroIntentos.setName(""); // NOI18N

        txtNumUser.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtNumUser.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lbIconRaspberry1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbIconRaspberry1.setIcon(new ImageIcon("img/img2.jpg"));

        btnAlarmasActive.setBackground(new java.awt.Color(0, 204, 255));
        btnAlarmasActive.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAlarmasActive.setForeground(new java.awt.Color(255, 255, 255));
        btnAlarmasActive.setText("Alarma");
        btnAlarmasActive.setBorder(null);
        btnAlarmasActive.setContentAreaFilled(false);
        btnAlarmasActive.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAlarmasActive.setOpaque(true);
        btnAlarmasActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlarmasActiveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout txtUserNumLayout = new javax.swing.GroupLayout(txtUserNum);
        txtUserNum.setLayout(txtUserNumLayout);
        txtUserNumLayout.setHorizontalGroup(
            txtUserNumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, txtUserNumLayout.createSequentialGroup()
                .addGroup(txtUserNumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtNumeroIntentos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(txtUserNumLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(txtUserNumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbIconRaspberry, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtNumUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnBorrar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnGuardar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(txtUserNumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(txtUserNumLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lbIconRaspberry1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(txtUserNumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(txtUserNumLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(btnAlarmasActive, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        txtUserNumLayout.setVerticalGroup(
            txtUserNumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(txtUserNumLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(135, 135, 135)
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addComponent(txtNumeroIntentos, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addComponent(lbIconRaspberry, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNumUser)
                .addGap(117, 117, 117))
            .addGroup(txtUserNumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(txtUserNumLayout.createSequentialGroup()
                    .addGap(54, 54, 54)
                    .addComponent(lbIconRaspberry1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(375, Short.MAX_VALUE)))
            .addGroup(txtUserNumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, txtUserNumLayout.createSequentialGroup()
                    .addContainerGap(341, Short.MAX_VALUE)
                    .addComponent(btnAlarmasActive, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(232, 232, 232)))
        );

        panelCameras.setBackground(new java.awt.Color(255, 255, 255));
        panelCameras.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));

        panelCamera4.setBackground(new java.awt.Color(255, 255, 255));
        panelCamera4.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        panelCamera4.setPreferredSize(new java.awt.Dimension(230, 240));

        lbCamera4.setIcon(new ImageIcon("img/cameraNoPermit.png"));

        javax.swing.GroupLayout panelCamera4Layout = new javax.swing.GroupLayout(panelCamera4);
        panelCamera4.setLayout(panelCamera4Layout);
        panelCamera4Layout.setHorizontalGroup(
            panelCamera4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCamera4Layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(lbCamera4)
                .addContainerGap(186, Short.MAX_VALUE))
        );
        panelCamera4Layout.setVerticalGroup(
            panelCamera4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCamera4Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(lbCamera4)
                .addContainerGap(145, Short.MAX_VALUE))
        );

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        mainPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                mainPanelMouseMoved(evt);
            }
        });
        mainPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mainPanelMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                mainPanelMouseReleased(evt);
            }
        });

        panelCamera2.setBackground(new java.awt.Color(255, 255, 255));
        panelCamera2.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        panelCamera2.setPreferredSize(new java.awt.Dimension(230, 240));

        lbCamera2.setIcon(new ImageIcon("img/cameraNoPermit.png"));

        javax.swing.GroupLayout panelCamera2Layout = new javax.swing.GroupLayout(panelCamera2);
        panelCamera2.setLayout(panelCamera2Layout);
        panelCamera2Layout.setHorizontalGroup(
            panelCamera2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCamera2Layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(lbCamera2)
                .addContainerGap(186, Short.MAX_VALUE))
        );
        panelCamera2Layout.setVerticalGroup(
            panelCamera2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCamera2Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(lbCamera2)
                .addContainerGap(145, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelCamerasLayout = new javax.swing.GroupLayout(panelCameras);
        panelCameras.setLayout(panelCamerasLayout);
        panelCamerasLayout.setHorizontalGroup(
            panelCamerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCamerasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(panelCamerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelCamera2, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelCamera4, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelCamerasLayout.setVerticalGroup(
            panelCamerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCamerasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCamerasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCamerasLayout.createSequentialGroup()
                        .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelCamerasLayout.createSequentialGroup()
                        .addComponent(panelCamera2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addComponent(panelCamera4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 153, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("SMART VISION PANEL");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Sistema de Video Vigilancia en Tiempo real con reconocimiento facial");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(txtUserNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelCameras, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(txtUserNum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(29, 29, 29)
                .addComponent(panelCameras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenuBar1.setBackground(new java.awt.Color(255, 255, 255));
        jMenuBar1.setBorder(null);
        jMenuBar1.setBorderPainted(false);
        jMenuBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jMenu2.setText("Archivo");

        mGuardarDatos.setText("Guardar Datos");
        mGuardarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mGuardarDatosActionPerformed(evt);
            }
        });
        jMenu2.add(mGuardarDatos);

        mBorrar.setText("Borrar Datos");
        mBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBorrarActionPerformed(evt);
            }
        });
        jMenu2.add(mBorrar);

        mSalir.setText("Salir");
        mSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mSalirActionPerformed(evt);
            }
        });
        jMenu2.add(mSalir);

        jMenuBar1.add(jMenu2);

        jMenu1.setText("Configuraciones");

        mNotificaciones.setText("Notificaciones");
        mNotificaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mNotificacionesActionPerformed(evt);
            }
        });
        jMenu1.add(mNotificaciones);

        mAcerca.setText("Acerca");
        mAcerca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAcercaActionPerformed(evt);
            }
        });
        jMenu1.add(mAcerca);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        FSDK.ClearTracker(tracker);        // TODO add your handling code here:
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        FSDK.SaveTrackerMemoryToFile(tracker, TrackerMemoryFile);        // TODO add your handling code here:
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void mainPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainPanelMouseReleased
        programState = programStateRemember;        // TODO add your handling code here:
    }//GEN-LAST:event_mainPanelMouseReleased

    private void mainPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainPanelMouseExited
        mouseX = 0;
        mouseY = 0;          // TODO add your handling code here:
    }//GEN-LAST:event_mainPanelMouseExited

    private void mainPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainPanelMouseMoved
        mouseX = evt.getX();
        mouseY = evt.getY();        // TODO add your handling code here:
    }//GEN-LAST:event_mainPanelMouseMoved

    private void mNotificacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mNotificacionesActionPerformed
        // TODO add your handling code here:
        viewEmail v = new viewEmail();
        v.setVisible(true);
        v.pack();
    }//GEN-LAST:event_mNotificacionesActionPerformed

    private void mAcercaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mAcercaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mAcercaActionPerformed

    private void mSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mSalirActionPerformed
        System.exit(0);
        // TODO add your handling code here:
    }//GEN-LAST:event_mSalirActionPerformed

    private void mGuardarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mGuardarDatosActionPerformed
        // TODO add your handling code here:
        FSDK.SaveTrackerMemoryToFile(tracker, TrackerMemoryFile);
    }//GEN-LAST:event_mGuardarDatosActionPerformed

    private void mBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBorrarActionPerformed
        // TODO add your handling code here:
        FSDK.ClearTracker(tracker);
    }//GEN-LAST:event_mBorrarActionPerformed

    private void btnAlarmasActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlarmasActiveActionPerformed
        // TODO add your handling code here:
        SendMail.activeAlarma = !SendMail.activeAlarma;
        showColorBtnAlarma();
        if (SendMail.activeAlarma) {
            SendMail.facesCount = 0;
        }

    }//GEN-LAST:event_btnAlarmasActiveActionPerformed

    public void showColorBtnAlarma() {
        if (SendMail.activeAlarma) {
            btnAlarmasActive.setBackground(Color.red);
            btnAlarmasActive.setText("Alarma(Activo)");
        } else {
            btnAlarmasActive.setBackground(new Color(0, 204, 255));

            btnAlarmasActive.setText("Alarma(Desactivado)");

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppFace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppFace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppFace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppFace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppFace().setVisible(true);
            }
        });
    }

    public void StartSocket() throws IOException {
        try {
            servsock = new ServerSocket(SOCKET_PORT);
            while (true) {
                //System.out.println("Waiting...");
                current++;
                try {
                    sock = servsock.accept();
                    //  System.out.println("Accepted connection : " + sock);
                    // send file

                    // receive file
                    byte[] mybytearray = new byte[FILE_SIZE];
                    InputStream is = sock.getInputStream();
                    byte[] bytes = IOUtils.readFully(is, -1, false);
                    faceDetection(bytes);//inicia la detecion de rostro

                    // mostrarImagenDesktop(bytes);
                    //crearVideo(bytes);
                    // System.out.println("File " + " downloaded (" + current + " bytes read)");
                } finally {
                    /*
                        if (fos != null) {
                            fos.close();
                        }
                        if (bos != null) {
                            bos.close();
                        }*/
                    if (sock != null) {
                        sock.close();
                    }
                }
            }
        } finally {
            if (servsock != null) {
                servsock.close();
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlarmasActive;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbCamera2;
    private javax.swing.JLabel lbCamera4;
    private javax.swing.JLabel lbIconRaspberry;
    private javax.swing.JLabel lbIconRaspberry1;
    private javax.swing.JMenuItem mAcerca;
    private javax.swing.JMenuItem mBorrar;
    private javax.swing.JMenuItem mGuardarDatos;
    private javax.swing.JMenuItem mNotificaciones;
    private javax.swing.JMenuItem mSalir;
    private javax.swing.JLabel mainPanel;
    private javax.swing.JPanel panelCamera2;
    private javax.swing.JPanel panelCamera4;
    private javax.swing.JPanel panelCameras;
    private javax.swing.JLabel txtNumUser;
    private javax.swing.JLabel txtNumeroIntentos;
    private javax.swing.JPanel txtUserNum;
    // End of variables declaration//GEN-END:variables
 public void faceDetection(final byte[] imageInByte) {
        Thread thread = new Thread() {
            public void run() {
                FSDK.HImage imageHandle = new FSDK.HImage();

                try {
                    /* BufferedImage originalImage = ImageIO.read(new File("E:\\img\\foto1.jpg"));

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(originalImage, "jpg", baos);
            baos.flush();
            byte[] imageInByte = baos.toByteArray();*/
                    //Path path = Paths.get("E:\\img\\foto11211111.jpg");

                    //Files.write(path, imageInByte);
                    // Memor ms = new MemoryStream(imageInByte);
                    //Image i = Image.FromStream(ms);
                    InputStream in = new ByteArrayInputStream(imageInByte);
                    BufferedImage bImageFromConvert = ImageIO.read(in);
                    FSDK.LoadImageFromAWTImage(imageHandle, bImageFromConvert, FSDK.FSDK_IMAGEMODE.FSDK_IMAGE_COLOR_32BIT);
                    // FSDK.LoadImageFromBuffer(imageHandle, imageInByte, 200, 200, 0, FSDK_IMAGEMODE.FSDK_IMAGE_COLOR_24BIT);
                    // baos.close();
                } catch (IOException ex) {
                    // Logger.getLogger(LiveRecognitionView.class.getName()).log(Level.SEVERE, null, ex);

                }

                Image awtImage[] = new Image[1];

                if (FSDK.SaveImageToAWTImage(imageHandle, awtImage, FSDK.FSDK_IMAGEMODE.FSDK_IMAGE_COLOR_32BIT) == FSDK.FSDKE_OK) {

                    FSDK.TFacePosition.ByReference facePosition = new FSDK.TFacePosition.ByReference();

                    long[] IDs = new long[256]; // maximum of 256 faces detected
                    long[] faceCount = new long[1];
                    int facesReconosing = 0;
                    FSDK.FeedFrame(tracker, 0, imageHandle, faceCount, IDs);
                    BufferedImage bufImage = null;
                    Graphics gr = null;
                    if (faceCount[0] >= 1) {
                        bufImage = new BufferedImage(awtImage[0].getWidth(null), awtImage[0].getHeight(null), BufferedImage.TYPE_INT_RGB);
                        gr = bufImage.getGraphics();
                        gr.drawImage(awtImage[0], 0, 0, null);
                        gr.setColor(Color.green);
                    }
                    for (int i = 0; i < faceCount[0]; ++i) {
                        //  txtNumUser.setText(Long.toString(IDs.length));
                        FSDK.GetTrackerFacePosition(tracker, 0, IDs[i], facePosition);

                        int left = facePosition.xc - (int) (facePosition.w * 0.6);
                        int top = facePosition.yc - (int) (facePosition.w * 0.5);
                        int w = (int) (facePosition.w * 1.2);

                        String[] name = new String[1];
                        int res = FSDK.GetAllNames(tracker, IDs[i], name, 65536); // maximum of 65536 characters

                        if (FSDK.FSDKE_OK == res && name[0].length() > 0) { // draw name
                            gr.setFont(new Font("Arial", Font.BOLD, 16));
                            FontMetrics fm = gr.getFontMetrics();
                            java.awt.geom.Rectangle2D textRect = fm.getStringBounds(name[0], gr);
                            gr.drawString(name[0], (int) (facePosition.xc - textRect.getWidth() / 2), (int) (top + w + textRect.getHeight()));
                            // facesCount = 0;
                            facesReconosing++;
                        } else {

                            System.out.println("cara no reconocido");
                            SendMail.facesCount++;

                        }
                        if (SendMail.activeAlarma) {
                            txtNumeroIntentos.setText(Integer.toString(SendMail.facesCount));
                        }
                        if (isOpenDialog == false) {
                            if (mouseX >= left && mouseX <= left + w && mouseY >= top && mouseY <= top + w) {
                                gr.setColor(Color.red);

                                if (programStateRemember == programState) {
                                    isOpenDialog = true;
                                    if (FSDK.FSDKE_OK == FSDK.LockID(tracker, IDs[i])) {
                                        // get the user name
                                        userName = (String) JOptionPane.showInputDialog(mainPanel, "Escriba Su Nombre:", "Cual es su nombre", JOptionPane.QUESTION_MESSAGE, null, null, "User");
                                        FSDK.SetName(tracker, IDs[i], userName);
                                        if (userName == null || userName.length() <= 0) {
                                            FSDK.PurgeID(tracker, IDs[i]);
                                        }
                                        FSDK.UnlockID(tracker, IDs[i]);

                                    }
                                    isOpenDialog = false;
                                }
                            }

                            programState = programStateRecognize;
                            gr.drawRect(left, top, w, w); // draw face rectangle

                        }

                    }
                    if (faceCount[0] == facesReconosing) {
                        SendMail.facesCount = 0;
                    }

                    if (SendMail.facesCount > 7) {

                        //SendMail.sendEmail(Convert.toBufferedImage(imageInByte));
                        if (SendMail.activeAlarma) {
                            SendMail.sendEmail(bufImage);
                        }
                        //  Util.saveImage(bufImage);

                    }

                    //envia la imagen a la web
                    final BufferedImage auxbuffer = bufImage;
                    Thread thread = new Thread() {
                        public void run() {

                            if (auxbuffer == null) {
                                sendImageToWeb(imageInByte, mWs);//envia a la web
                            } else {
                                sendImageToWeb(Convert.toByte(auxbuffer), mWs);//envia a la web
                            }
                        }
                    };
                    thread.start();
                    ///  BufferedImage auxBufer = bufImage;
                    /*
            try {
                if (bufImage != null) {
                    //  File outputfile = new File("E:\\img\\foto11211111" + current + ".jpg");
                    // ImageIO.write(auxBufer, "jpg", outputfile);
                    // ImageIO.write(awtImage[0], "jpg", new File("C:\\out.jpg"));
                } else {
                    if (awtImage[0] != null) {

                        File outputfile = new File("E:\\img\\foto11211111" + current + ".jpg");
                        //ImageIO.write(auxBufer, "jpg", outputfile);
                        ImageIO.write(toBufferedImage(awtImage[0]), "jpg", outputfile);

                    }
                }

                // Files.write(path, awtImage[0]);
            } catch (IOException ex) {
                Logger.getLogger(appCamera.class.getName()).log(Level.SEVERE, null, ex);
            }*/
                    // display current frame
                    final BufferedImage bufImageAUX = bufImage;
                    final Image awtImageAUX = awtImage[0];
                    Thread thread2 = new Thread() {
                        public void run() {
                            mainPanel.getParent().getGraphics().drawImage((bufImageAUX != null) ? bufImageAUX : awtImageAUX, mainPanel.getX(), mainPanel.getY(), null);
                        }
                    };
                    thread2.start();

                    // mainPanel.getParent().getGraphics().drawImage((bufImage != null) ? resize(bufImage, bufImage.getWidth() * 2, bufImage.getHeight() * 2) : toBufferedImageAndSize(awtImage[0]), mainPanel.getX(), mainPanel.getY(), null);
                    /*
            try {
                File outputfile = new File("E:\\img\\foto11211111" + current + ".jpg");
                Graphics gra = mainPanel.getGraphics();
                if (bufImage != null) {
                    ImageIO.write(bufImage, "png", outputfile);
                }
            } catch (IOException ex) {
                Logger.getLogger(appCamera.class.getName()).log(Level.SEVERE, null, ex);
            }*/
                    // mainPanel.getRootPane().getGraphics().drawImage((bufImage != null) ? bufImage : awtImage[0], 0, 0, null);
                }
                FSDK.FreeImage(imageHandle); // delete the FaceSDK image handle
            }
        };
        thread.start();
    }

    public void getUserNumber() {
        //FSDK.gett

    }

    public void InitSocketClientWeb() {

        try {

            mWs = new WebSocketClient(new URI("ws://192.168.100.2:8080/videovigilancia/livevideo")) {//seconecta al servidor de socket que esta en tomcat
                @Override
                public void onOpen(ServerHandshake sh) {
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    System.out.println("Se establecio la connecion con elservidor->" + sh.toString());
                }

                @Override
                public void onMessage(String string) {
                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void onClose(int i, String string, boolean bln) {
                    // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    System.out.println("el cliente finalizo : " + i + " - " + string + "  " + bln);
                }

                @Override
                public void onError(Exception excptn) {
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    System.out.println("ocurrio un error en el cliente->" + excptn.getMessage());
                }
            };
            mWs.connect();///conecta a java web socktet
            //enviar aqui las imagenes que optiene el Raspberry  puede enviar las imagenes en fromato byte[] 
            //byte[]  bytes=los bytes de la imagen
            //mWs.send(bytes); 
            //enviar imagenes de la pc 
            //sendImage("E://img//assasing.png", mWs);

            //sendImage(webcam, mWs);
        } catch (Exception e) {
            System.out.println("Error->" + e.getMessage());
        } finally {
            // mWs.close();
        }
    }

    public void sendImageToWeb(final byte[] data, final WebSocketClient mWs) {
        Thread thread = new Thread() {
            public void run() {
                try {
                    mWs.send(data);
                } catch (Exception e) {
                    System.out.println("Error AL enviar  una imagen a la web->" + e.getMessage());
                }
            }
        };
        thread.start();

    }
}
